	listen 80;
	listen [::]:80;

	listen 443 ssl spdy;
	listen [::]:443 ssl spdy;

	set $fixed_www '';
	set $needs_redirect 0;

	# check and decide on adding www prefix
	if ($host !~* ^www(.*)) {
		set $fixed_www 'www.';
		set $needs_redirect 1;
	}

	# check and decide on moving to https based on scheme ( needed locally )
	if ($scheme != 'https') {
		set $needs_redirect 1;
	}

	# check and decide on moving to https based on scheme ( needed amazon )
	#if ($http_x_forwarded_proto != 'https') {
	#    set $needs_redirect 1;
	#}

	if ($request_uri ~* ^.*elb-health-check(\.html)?(\:80|\:443|\:8080|\:8443)?$ ) {
		return 200 '{ "healthy": true }';
	}

	# set $needs_redirect 0;
	# Redirect all requests to https and adds www prefix
	if ($needs_redirect) {
		return 301 https://$fixed_www$host$request_uri;
	}

	## Only allow these request methods
	if ($request_method !~ ^(GET|HEAD|POST|PUT|OPTIONS)$ ) {
		return 444;
	}
	## Dont allow random ip scanning
	if ($host !~ (.com|.co.uk)$ ) {
		return 444;
	}
	## Deny certain Referers (they will affect our SEO scores) ###
	if ( $http_referer ~* (babes|forsale|girl|jewelry|love|nudit|organic|poker|porn|sex|teen) ) {
		return 403;
	}
	## Block download agents
	if ($http_user_agent ~* LWP::Simple|BBBike|wget) {
		return 403;
	}

	## Enable HSTS(HTTP Strict Transport Security) https://developer.mozilla.org/en-US/docs/Security/HTTP_Strict_Transport_Security
	## To avoid ssl stripping https://en.wikipedia.org/wiki/SSL_stripping#SSL_stripping
	# add_header Strict-Transport-Security "max-age=604800; includeSubDomains; preload; always";

	# Dynamic Subdomains
	server_name ~^(www\.)?((?<subdomain>.+?)(\.|\-|\_))?((?<domain>.+?)\.)?(?<host_domain>.+)\.(?<tld>co.uk)$ ~^(www\.)?((?<subdomain>.+?)(\.|\-|\_))?((?<domain>.+?)\.)?(?<host_domain>.+)\.(?<tld>.*)$;

	set $base_root "<application-path>";

	set $root "${base_root}/website/dist";

	# Add folder name that you want as a subdomain i.e. (app|intranet|<something>|<something-else>)
	if ( $subdomain ~* (app|intranet) ) {
		set $root "${base_root}/${subdomain}/dist";
	}

	root $root;

	#!!! IMPORTANT !!! We need to hide all system files from prying eyes
	# This will deny access to any hidden file (beginning with a .)
	location ~ /\. {
		deny  all;
	}

	# redirect server error pages to the static page /50x.html
	error_page   500 502 503 504  /50x.html;
	location = /50x.html {
		root   html;
	}

	location ~ ^/(images/|img/|video/|javascript/|js/|css/|stylesheets/|styles/|flash/|media/|static/|fonts/|font/|robots.txt|humans.txt|sitemap.xml|favicon.ico) {
		add_header Cache-Control public;
		add_header Pragma public;
		access_log off;
		expires max;
	}

	location ~ ^/spec {
		root "${base_root}/api";
		try_files $uri $uri/ @api;
	}

	location ~ ^/api/spec {
		root "${base_root}";
		try_files $uri $uri/ @api;
	}

	location ~ ^/api/tests {
		root "${base_root}";
		try_files $uri $uri/ @api;
	}

	location ~ ^/api {
		try_files $uri $uri/ @api;
	}

	location ~ ^/tests {
		try_files $uri $uri/ @ember;
	}

	location ~ ^/cordova.js {
		try_files $uri $uri/ @ember;
	}

	location ~ ^/ember-cli-live-reload.js {
		try_files $uri $uri/ @ember;
	}

	location ~ ^/livereload.js {
		try_files $uri $uri/ @live-reload;
	}

	location @ci {
		set $ci_server "http://ci_server";

		proxy_pass $ci_server;
	}

	location @api {
		set $api_server "https://api_server";

		include common/proxy.ssl.conf;

		proxy_pass $api_server;

		add_header Cache-Control no-cache;
		add_header Cache-Control private;
		add_header Pragma no-cache;
		add_header Pragma private;
		expires 0;
	}

	location @ember {
		set $ember_server "http://${subdomain}_ember_server";

		proxy_pass $ember_server;
	}

	location @live-reload {

		set $live_reload_server "http://website_live_reload_server";

		if ($subdomain){
			set $live_reload_server "http://${subdomain}_live_reload_server";
		}

		proxy_pass $live_reload_server;

		proxy_hide_header Content-Type;

		add_header Content-Type "application/javascript";
	}

	location @prerender {
		# proxy_set_header X-Prerender-Token qiiDAEtYRKbDkIfjXCbo;

		set $prerender 0;
		if ($http_user_agent ~* "baiduspider|twitterbot|facebookexternalhit|rogerbot|linkedinbot|embedly|quora link preview|showyoubot|outbrain|pinterest|slackbot|vkShare|W3C_Validator") {
			set $prerender 1;
		}
		if ($args ~ "_escaped_fragment_") {
			set $prerender 1;
		}
		if ($http_user_agent ~ "Prerender") {
			set $prerender 0;
		}
		if ($uri ~ "\.(js|css|xml|less|png|jpg|jpeg|gif|pdf|doc|txt|ico|rss|zip|mp3|rar|exe|wmv|doc|avi|ppt|mpg|mpeg|tif|wav|mov|psd|ai|xls|mp4|m4a|swf|dat|dmg|iso|flv|m4v|torrent|ttf|woff)") {
			set $prerender 0;
		}

		if ($prerender = 1) {

			#setting prerender as a variable forces DNS resolution since nginx caches IPs and doesnt play well with load balancing
			set $prerender "service.prerender.io";
			rewrite .* /$scheme://$host$request_uri? break;
			proxy_pass http://$prerender;
		}
		if ($prerender = 0) {
			rewrite .* /index.html break;
		}
	}
