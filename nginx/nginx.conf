user <nginx-user> wheel;

worker_processes 4;

pid /var/run/nginx.pid;

worker_rlimit_nofile 1024;

error_log /var/log/nginx/error.log debug;

events {
	accept_mutex on;
	multi_accept on;
	worker_connections 1024;
}

http {
	charset utf-8;

	include mime.types;

	port_in_redirect off;

	include common/map.conf;

	include common/proxy.conf;

	underscores_in_headers on;

	index index.php index.htm index.html;

	default_type  application/octet-stream;

	# Compressed Logs
	log_format	main  '$remote_addr - $remote_user [$time_local] | Request: "$request ( $body_bytes_sent bytes )" | '
					  'Status: $status | Referer: "$http_referer" | User Agent: "$http_user_agent" | '
					  'Upstream Address: "$upstream_addr" | Upstream Cache Status: "$upstream_cache_status" | '
					  'Forwarded For: "$http_x_forwarded_for" | Port: "$server_port"';

	# Beautiful Logs
	log_format  beaut '[$time_local] \n'
					  'Status: $status \n'
					  'Port: $server_port \n'
					  'Remote Address: $remote_addr - $remote_user \n'
					  'Request: $request ( $body_bytes_sent bytes ) \n'
					  'Referer: $http_referer \n'
					  'Forwarded For: $http_x_forwarded_for \n'
					  'User Agent: $http_user_agent \n'
					  'Upstream Address: $upstream_addr \n'
					  'Upstream Cache Status: $upstream_cache_status \n\n';

	access_log /var/log/nginx/access.log beaut;

	# https://t37.net/nginx-optimization-understanding-sendfile-tcp_nodelay-and-tcp_nopush.html
	sendfile on;
	tcp_nopush on;
	tcp_nodelay on;

	gzip on;
	expires 1d;
	gzip_vary on;
	gzip_proxied any;
	gzip_comp_level 6;
	gzip_buffers 16 8k;
	gzip_min_length 1000;
	gzip_disable "MSIE [1-6]\.(?!.*SV1)";
	gzip_types text/plain text/css text/xml application/xml application/xml+rss application/json application/x-javascript text/javascript application/javascript;

	## Start: Size Limits & Buffer Overflows ##
	large_client_header_buffers 2 5M;
	client_header_buffer_size 5M;
	client_body_buffer_size  5M;
	client_max_body_size 5M;

	## Start: Timeouts ##
	client_body_timeout   10;
	client_header_timeout 10;
	send_timeout          10;
	keepalive_timeout    5 5;

	### Directive describes the zone, in which the session states are stored i.e. store in slimits. ###
	### 1m can handle 32000 sessions with 32 bytes/session, set to 5m x 32000 session ###
	limit_conn_zone $binary_remote_addr zone=slimits:10m;

	### Control maximum number of simultaneous connections for one session i.e. ###
	### restricts the amount of connections from a single ip address ###
	limit_conn slimits 5;

	# don't send the nginx version number in error pages and Server header
	server_tokens off;

	add_header X-Host $host;

	# config to don't allow the browser to render the page inside an frame or iframe
	# and avoid clickjacking http://en.wikipedia.org/wiki/Clickjacking
	# if you need to allow [i]frames, you can use SAMEORIGIN or even set an uri with ALLOW-FROM uri
	# https://developer.mozilla.org/en-US/docs/HTTP/X-Frame-Options
	add_header X-Frame-Options SAMEORIGIN;

	# when serving user-supplied content, include a X-Content-Type-Options: nosniff header along with the Content-Type: header,
	# to disable content-type sniffing on some browsers.
	# https://www.owasp.org/index.php/List_of_useful_HTTP_headers
	# currently suppoorted in IE > 8 http://blogs.msdn.com/b/ie/archive/2008/09/02/ie8-security-part-vi-beta-2-update.aspx
	# http://msdn.microsoft.com/en-us/library/ie/gg622941(v=vs.85).aspx
	# 'soon' on Firefox https://bugzilla.mozilla.org/show_bug.cgi?id=471020
	add_header X-Content-Type-Options nosniff;

	# This header enables the Cross-site scripting (XSS) filter built into most recent web browsers.
	# It's usually enabled by default anyway, so the role of this header is to re-enable the filter for
	# this particular website if it was disabled by the user.
	# https://www.owasp.org/index.php/List_of_useful_HTTP_headers
	add_header X-XSS-Protection "1; mode=block";

	# with Content Security Policy (CSP) enabled(and a browser that supports it(http://caniuse.com/#feat=contentsecuritypolicy),
	# you can tell the browser that it can only download content from the domains you explicitly allow
	# http://www.html5rocks.com/en/tutorials/security/content-security-policy/
	# https://www.owasp.org/index.php/Content_Security_Policy
	# directives for css and js - [ 'unsafe-inline' 'unsafe-eval' ] (needed for googleapis which inject code into the dom)
	# More: http://www.html5rocks.com/en/tutorials/security/content-security-policy/#inline-code-considered-harmful
	# Creating: http://cspisawesome.com/content_security_policies
	# Each site is added one by one when a warning pops up on the browser console blocking the request
	add_header Content-Security-Policy "default-src 'self' 'unsafe-inline' 'unsafe-eval' data: *.local.com:* ws://*.local.com:* wss://*.local.com:* *.ngrok.io:* ws://*.ngrok.io:* wss://*.ngrok.io:* *.gstatic.com *.bootstrapcdn.com *.ionicframework.com *.googleapis.com *.googleadservices.com *.googleusercontent.com *.g.doubleclick.net *.google-analytics.com *.cloudflare.com *.elasticbeanstalk.com *.amazonaws.com *.facebook.com *.facebook.net";

	# SSL Certificates
	# ssl on;
	ssl_certificate_key <application-path>/sslcert/server.key;
	ssl_certificate <application-path>/sslcert/server.crt;

	# Diffie-Hellman parameter for DHE ciphersuites, recommended 2048 bits
	ssl_dhparam <application-path>/sslcert/dhparam.pem;

	# enable session resumption to improve https performance
	# http://vincent.bernat.im/en/blog/2011-ssl-session-reuse-rfc5077.html
	ssl_session_cache shared:SSL:32m;
	ssl_session_timeout 10m;
	ssl_buffer_size 8k;

	# enables server-side protection from BEAST attacks
	# http://blog.ivanristic.com/2013/09/is-beast-still-a-threat.html
	ssl_prefer_server_ciphers on;

	# disable SSLv3(enabled by default since nginx 0.8.19) since it's less secure then TLS http://en.wikipedia.org/wiki/Secure_Sockets_Layer#SSL_3.0
	ssl_protocols TLSv1 TLSv1.1 TLSv1.2;

	# ciphers chosen for forward secrecy and compatibility
	# http://blog.ivanristic.com/2013/08/configuring-apache-nginx-and-openssl-for-forward-secrecy.html
	ssl_ciphers "ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA:ECDHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES128-SHA256:DHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES256-GCM-SHA384:AES128-GCM-SHA256:AES256-SHA256:AES128-SHA256:AES256-SHA:AES128-SHA:DES-CBC3-SHA:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!MD5:!PSK:!RC4";

	# enable ocsp stapling (mechanism by which a site can convey certificate revocation information to visitors in a privacy-preserving, scalable manner)
	# http://blog.mozilla.org/security/2013/07/29/ocsp-stapling-in-firefox/
	#ssl_stapling on;
	#ssl_stapling_verify on;
	#ssl_trusted_certificate <application-path>/sslcert/godaddy_bundle_1.crt;
	#ssl_trusted_certificate <application-path>/sslcert/godaddy_bundle_2.crt;
	#ssl_trusted_certificate <application-path>/sslcert/godaddy_bundle_3.crt;

	# using Google's DNS to avoid wrong DNS caching
	resolver 8.8.8.8 8.8.4.4;

	server {
		listen 80; ## listen for ipv4; this line is default and implied
		listen [::]:80 ipv6only=on; ## listen for ipv6
		listen 443 ssl; ## listen for ssl

		server_name  localhost;

		#charset koi8-r;

		#access_log  logs/host.access.log  main;

		location / {
			root   html;
		}

		#error_page  404              /404.html;

		# redirect server error pages to the static page /50x.html
		#
		error_page   500 502 503 504  /50x.html;
		location = /50x.html {
			root   html;
		}

		# proxy the PHP scripts to Apache listening on 127.0.0.1:80
		#
		#location ~ \.php$ {
		#    proxy_pass   http://127.0.0.1;
		#}

		# pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
		#
		#location ~ \.php$ {
		#    root           html;
		#    fastcgi_pass   127.0.0.1:9000;
		#    fastcgi_index  index.php;
		#    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
		#    include        fastcgi_params;
		#}

		# deny access to .htaccess files, if Apache's document root
		# concurs with nginx's one
		#
		#location ~ /\.ht {
		#    deny  all;
		#}
	}

	include conf.d/*.conf;
}
