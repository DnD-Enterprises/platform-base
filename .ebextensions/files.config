##############################################################
#
# files to be used in later commands
#
##############################################################

files:
    "/opt/elasticbeanstalk/env.vars" :
        mode: "000775"
        owner: root
        group: users
        content: |
            export NODE_VER=0.12.6
            export NGINX_VER=1.9.3
            export HOME=/home/ec2-user
            export NPM_CONFIG_COLOR=false
            export NPM_CONFIG_LOGLEVEL=warn
            export NPM_CONFIG_PRODUCTION=false

            case $( arch ) in
            ( i686 ) export ARCH=x86;;
            ( x86_64 ) export ARCH=x64;;
            esac
            export PATH="$PATH:/usr/bin/:/usr/sbin/:/sbin/:/bin/:/usr/local/bin/:/opt/elasticbeanstalk/node-install/node-v$NODE_VER-linux-$ARCH/bin/:/root/.npm"

    "/opt/elasticbeanstalk/ssl-protect.sh" :
        mode: "000755"
        owner: root
        group: root
        encoding: plain
        content: |
            #!/bin/bash
            . /opt/elasticbeanstalk/env.vars
            exec >>/var/log/cfn-init.log 2>&1

            cat sslcert/server.crt sslcert/godaddy_bundle_1.crt sslcert/godaddy_bundle_2.crt sslcert/godaddy_bundle_3.crt > sslcert/bundle.crt
            cp -fv sslcert/bundle.crt sslcert/server.crt
            rm -fv sslcert/bundle.crt

    "/opt/elasticbeanstalk/password-protect.sh" :
        mode: "000755"
        owner: root
        group: root
        encoding: plain
        content: |
            #!/bin/bash
            . /opt/elasticbeanstalk/env.vars
            exec >>/var/log/cfn-init.log 2>&1

            if [ "$PRODUCTION" = "true" ]
            then
                echo "------------------ PRODUCTION ENVIRONMENT - NO PASSWORD SET ----------------"
                echo "" > /etc/nginx/common/restricted.conf
            else
                echo "------------------ DEVELOPMENT ENVIRONMENT - PASSWORD SET ------------------"
                htpasswd -bc config/.htpasswd     $HT_USER $HT_PASSWORD
                htpasswd -bc config/.api.htpasswd $HT_USER $HT_PASSWORD
            fi

    "/opt/elasticbeanstalk/build-app.sh" :
        mode: "000755"
        owner: root
        group: root
        encoding: plain
        content: |
            #!/bin/bash
            . /opt/elasticbeanstalk/env.vars
            exec >>/var/log/cfn-init.log 2>&1

            if [ "$PRODUCTION" = "true" ]
            then
                echo "------------------ PRODUCTION ENVIRONMENT - APP BUILT - NO DEBUG MODE SET ----------------"
                npm run build-prod || npm run build
                echo "------------------ PRODUCTION ENVIRONMENT - APP BUILT - NO DEBUG MODE SET ----------------"
            else
                echo "------------------ DEVELOPMENT ENVIRONMENT - APP BUILT - DEBUG MODE SET ------------------"
                npm run build
                echo "------------------ DEVELOPMENT ENVIRONMENT - APP BUILT - DEBUG MODE SET ------------------"
            fi

    "/opt/elasticbeanstalk/update-node.sh" :
        mode: "000775"
        owner: root
        group: users
        content: |
            #!/bin/bash
            . /opt/elasticbeanstalk/env.vars
            exec >>/var/log/cfn-init.log 2>&1

            #download and extract desired node.js version
            echo "checking node..."

            OUT=$( [ ! -d "/opt/elasticbeanstalk/node-install" ] && echo "trying to install node.js $NODE_VER" && mkdir /opt/elasticbeanstalk/node-install; cd /opt/elasticbeanstalk/node-install/ && \
              wget -nc http://nodejs.org/dist/v$NODE_VER/node-v$NODE_VER-linux-$ARCH.tar.gz && \
              tar --skip-old-files -xzpf node-v$NODE_VER-linux-$ARCH.tar.gz) || error_exit "Failed to UPDATE node version. $OUT" $?.
            echo $OUT

    "/opt/elasticbeanstalk/update-npm.sh" :
        mode: "000775"
        owner: root
        group: users
        content: |
            echo "checking npm..."
            npm config set prefix /usr

            #UNCOMMENT to update npm, otherwise will be updated on instance init or rebuild
            rm -f /opt/elasticbeanstalk/node-install/npm_updated

            if [ ! -f "/opt/elasticbeanstalk/node-install/npm_updated" ]; then
                cd /opt/elasticbeanstalk/node-install/node-v$NODE_VER-linux-$ARCH/bin/ && /opt/elasticbeanstalk/node-install/node-v$NODE_VER-linux-$ARCH/bin/npm update npm -g
                touch /opt/elasticbeanstalk/node-install/npm_updated
                echo "YAY! Updated global NPM version to `npm -v`"
            else
              echo "Skipping NPM -g version update. To update, please uncomment 40install_node.sh:12"
            fi

    "/opt/elasticbeanstalk/update-nginx.sh" :
        mode: "000775"
        owner: root
        group: users
        content: |
            #!/bin/bash
            . /opt/elasticbeanstalk/env.vars
            exec >>/var/log/cfn-init.log 2>&1

            #download & make install desired nginx version
            echo "checking nginx..."

            #remember to add desired modules to BOTH arch-dependent commands below:
            case $( arch ) in
            ( i686 ) OUT=$([ ! -d "/root/nginx-$NGINX_VER" ] && echo "trying to install nginx $NGINX_VER" &>> /var/log/cfn-init.log && \
             cd /root/ && curl --retry 10  http://nginx.org/download/nginx-$NGINX_VER.tar.gz | tar zx && cd /root/nginx-$NGINX_VER &>> /var/log/cfn-init.log && \
              ./configure --prefix=/usr/share/nginx --sbin-path=/usr/sbin/nginx --conf-path=/etc/nginx/nginx.conf --error-log-path=/var/log/nginx/error.log \
              --http-log-path=/var/log/nginx/access.log --http-client-body-temp-path=/var/lib/nginx/tmp/client_body --http-proxy-temp-path=/var/lib/nginx/tmp/proxy \
               --http-fastcgi-temp-path=/var/lib/nginx/tmp/fastcgi --http-uwsgi-temp-path=/var/lib/nginx/tmp/uwsgi --http-scgi-temp-path=/var/lib/nginx/tmp/scgi \
               --pid-path=/var/run/nginx.pid --lock-path=/var/lock/subsys/nginx --user=nginx --group=nginx --with-file-aio --with-ipv6 --with-http_ssl_module \
               --with-http_spdy_module --with-http_realip_module --with-http_gunzip_module --with-http_gzip_static_module --with-http_stub_status_module \
               --with-pcre --with-debug --with-ld-opt=' -Wl,-E' \
               --with-cc-opt='-O2 -g -pipe -Wall -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector --param=ssp-buffer-size=4 -m32 -march=i686 -mtune=pentium4 -fasynchronous-unwind-tables' &>> /var/log/cfn-init.log \
              && make &>> /var/log/cfn-init.log && make install &>> /var/log/cfn-init.log);;

            ( x86_64 ) OUT=$([ ! -d "/root/nginx-$NGINX_VER" ] && echo "trying to install nginx $NGINX_VER" && \
             cd /root/ && curl --retry 10  http://nginx.org/download/nginx-$NGINX_VER.tar.gz | tar zx && cd /root/nginx-$NGINX_VER &>> /var/log/cfn-init.log && \
              ./configure --prefix=/usr/share/nginx --sbin-path=/usr/sbin/nginx --conf-path=/etc/nginx/nginx.conf --error-log-path=/var/log/nginx/error.log \
              --http-log-path=/var/log/nginx/access.log --http-client-body-temp-path=/var/lib/nginx/tmp/client_body --http-proxy-temp-path=/var/lib/nginx/tmp/proxy \
               --http-fastcgi-temp-path=/var/lib/nginx/tmp/fastcgi --http-uwsgi-temp-path=/var/lib/nginx/tmp/uwsgi --http-scgi-temp-path=/var/lib/nginx/tmp/scgi \
               --pid-path=/var/run/nginx.pid --lock-path=/var/lock/subsys/nginx --user=nginx --group=nginx --with-file-aio --with-ipv6 --with-http_ssl_module \
               --with-http_spdy_module --with-http_realip_module --with-http_gunzip_module --with-http_gzip_static_module --with-http_stub_status_module \
               --with-pcre --with-debug \
               --with-cc-opt='-O2 -g -pipe -Wall -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector --param=ssp-buffer-size=4 -m64 -mtune=generic' --with-ld-opt=' -Wl,-E' &>> /var/log/cfn-init.log \
              && make &>> /var/log/cfn-init.log && make install &>> /var/log/cfn-init.log );;
            esac

            echo $OUT

    "/opt/elasticbeanstalk/hooks/appdeploy/pre/10stop.sh":
        mode: "000755"
        owner: root
        group: users
        content: |
            #!/bin/bash
            . /opt/elasticbeanstalk/env.vars
            exec >>/var/log/cfn-init.log 2>&1

            function error_exit
            {
              eventHelper.py --msg "$1" --severity ERROR
              exit $2
            }

            #test nginx config before proceeding with restart
            echo "Testing nginx config.... "

            OUT=$(/usr/sbin/nginx -tc /etc/nginx/nginx.conf && /opt/elasticbeanstalk/containerfiles/ebnode.py --action stop-all 2>&1) || error_exit "Failed to stop service daemons, CHECK NGINX CONFIG $OUT" $?
            echo $OUT

    "/opt/elasticbeanstalk/hooks/appdeploy/pre/40install_node.sh" :
        mode: "000775"
        owner: root
        group: users
        content: |
            #!/bin/bash
            . /opt/elasticbeanstalk/env.vars
            exec >>/var/log/cfn-init.log 2>&1

            function error_exit
            {
              eventHelper.py --msg "$1" --severity ERROR
              exit $2
            }

            # Nginx and Node updates have been moved to their own file
            # And are no longer run We will use what Amazon provides

            # source /opt/elasticbeanstalk/update-nginx.sh
            # source /opt/elasticbeanstalk/update-node.sh
            # source /opt/elasticbeanstalk/update-npm.sh

            #make sure node binaries can be found globally
            if [ ! -L /usr/bin/node ]; then
                ln -sf /opt/elasticbeanstalk/node-install/node-v$NODE_VER-linux-$ARCH/bin/node /usr/bin/node
            fi

            if [ ! -L /usr/bin/npm ]; then
                ln -sf /opt/elasticbeanstalk/node-install/node-v$NODE_VER-linux-$ARCH/bin/npm /usr/bin/npm
            fi

            npm config set prefix /usr

    "/opt/elasticbeanstalk/hooks/appdeploy/pre/50npm.sh" :
        mode: "000775"
        owner: root
        group: users
        content: |
            #!/bin/bash
            . /opt/elasticbeanstalk/env.vars
            exec >>/var/log/cfn-init.log 2>&1

            function error_exit
            {
                eventHelper.py --msg "$1" --severity ERROR
                exit $2
            }

            #avoid long NPM fetch hangups
            npm config set fetch-retry-maxtimeout 15000

            #install not-installed yet app node_modules
            if [ ! -d "/var/node_modules" ]; then
                mkdir /var/node_modules ;
            fi

            if [ -d /tmp/deployment/application ]; then
                ln -sf /var/node_modules /tmp/deployment/application/
            fi

            echo "-------------------------------- Installing / Updating NPM Modules -----------------------------------"
            OUT=$([ -d "/tmp/deployment/application" ] && cd /tmp/deployment/application && npm install &>> /var/log/deploy.log) || error_exit "Failed to run npm install.  $OUT" $?
            echo $OUT

    "/opt/elasticbeanstalk/hooks/configdeploy/pre/40install_node.sh" :
        mode: "000666"
        owner: root
        group: users
        content: |
            #no need to run npm install during configdeploy

    "/opt/elasticbeanstalk/hooks/configdeploy/pre/50npm.sh" :
        mode: "000666"
        owner: root
        group: users
        content: |
            #no need to run npm install during configdeploy

    "/etc/nginx/nginx.conf" :
        mode: "000755"
        owner: root
        group: root
        content: |
            user nginx;

            worker_processes  1;

            pid /var/run/nginx.pid;

            worker_rlimit_nofile 1024;

            error_log /var/log/nginx/error.log;

            events {
                accept_mutex on;
                multi_accept on;
                worker_connections 1024;
            }

            http {
                charset utf-8;

                port_in_redirect off;

                include common/map.conf;

                include common/proxy.conf;

                underscores_in_headers on;

                include /etc/nginx/mime.types;

                index index.php index.html index.htm;

                default_type  application/octet-stream;

                log_format  main  '$remote_addr - $remote_user [$time_local] | Request: "$request ( $body_bytes_sent bytes )" | '
                                  'Status: $status | Referer: "$http_referer" | User Agent: "$http_user_agent" | '
                                  'Upstream Address: "$upstream_addr" | Upstream Cache Status: "$upstream_cache_status" | '
                                  'Forwarded For: "$http_x_forwarded_for" | Port: "$server_port" | Host: "$host"';

                access_log /var/log/nginx/access.log main;

                sendfile on;
                tcp_nopush on;
                tcp_nodelay on;

                gzip on;
                expires 1d;
                gzip_vary on;
                gzip_proxied any;
                gzip_comp_level 6;
                gzip_buffers 16 8k;
                gzip_min_length 1000;
                gzip_disable "MSIE [1-6]\.(?!.*SV1)";
                gzip_types text/plain text/css text/xml application/xml application/xml+rss application/json application/x-javascript text/javascript application/javascript;

                #proxy_cache cache_zone;
                #proxy_cache_key sfs$request_uri$scheme;
                #proxy_temp_path    /var/tmp/nginx;
                #proxy_cache_path  /var/cache/nginx levels=1:2 keys_zone=cache_zone:8m max_size=3000m inactive=600m;

                ## Start: Size Limits & Buffer Overflows ##
                large_client_header_buffers 2 5M;
                client_header_buffer_size 5M;
                client_body_buffer_size  5M;
                client_max_body_size 5M;

                ## Start: Timeouts ##
                client_body_timeout   10;
                client_header_timeout 10;
                send_timeout          10;
                keepalive_timeout    5 5;

                ### Directive describes the zone, in which the session states are stored i.e. store in slimits. ###
                ### 1m can handle 32000 sessions with 32 bytes/session, set to 5m x 32000 session ###
                limit_conn_zone $binary_remote_addr zone=slimits:10m;

                ### Control maximum number of simultaneous connections for one session i.e. ###
                ### restricts the amount of connections from a single ip address ###
                limit_conn slimits 5;

                # don't send the nginx version number in error pages and Server header
                server_tokens off;

                add_header X-Host $host;

                # config to don't allow the browser to render the page inside an frame or iframe
                # and avoid clickjacking http://en.wikipedia.org/wiki/Clickjacking
                # if you need to allow [i]frames, you can use SAMEORIGIN or even set an uri with ALLOW-FROM uri
                # https://developer.mozilla.org/en-US/docs/HTTP/X-Frame-Options
                add_header X-Frame-Options SAMEORIGIN;

                # when serving user-supplied content, include a X-Content-Type-Options: nosniff header along with the Content-Type: header,
                # to disable content-type sniffing on some browsers.
                # https://www.owasp.org/index.php/List_of_useful_HTTP_headers
                # currently suppoorted in IE > 8 http://blogs.msdn.com/b/ie/archive/2008/09/02/ie8-security-part-vi-beta-2-update.aspx
                # http://msdn.microsoft.com/en-us/library/ie/gg622941(v=vs.85).aspx
                # 'soon' on Firefox https://bugzilla.mozilla.org/show_bug.cgi?id=471020
                add_header X-Content-Type-Options nosniff;

                # This header enables the Cross-site scripting (XSS) filter built into most recent web browsers.
                # It's usually enabled by default anyway, so the role of this header is to re-enable the filter for
                # this particular website if it was disabled by the user.
                # https://www.owasp.org/index.php/List_of_useful_HTTP_headers
                add_header X-XSS-Protection "1; mode=block";

                # with Content Security Policy (CSP) enabled(and a browser that supports it(http://caniuse.com/#feat=contentsecuritypolicy),
                # you can tell the browser that it can only download content from the domains you explicitly allow
                # http://www.html5rocks.com/en/tutorials/security/content-security-policy/
                # https://www.owasp.org/index.php/Content_Security_Policy
                # directives for css and js - [ 'unsafe-inline' 'unsafe-eval' ] (needed for googleapis which inject code into the dom)
                # More: http://www.html5rocks.com/en/tutorials/security/content-security-policy/#inline-code-considered-harmful
                # Creating: http://cspisawesome.com/content_security_policies
                # Each site is added one by one when a warning pops up on the browser console blocking the request
                add_header Content-Security-Policy "default-src 'self' 'unsafe-inline' 'unsafe-eval' data: *.local.com:* ws://*.local.com:* wss://*.local.com:* *.ngrok.io:* ws://*.ngrok.io:* wss://*.ngrok.io:* *.gstatic.com *.bootstrapcdn.com *.ionicframework.com *.google.com *.googleapis.com *.googleadservices.com *.googleusercontent.com *.g.doubleclick.net *.google-analytics.com *.cloudflare.com *.elasticbeanstalk.com *.amazonaws.com *.facebook.com *.facebook.net";

                # SSL Certificates
                # ssl on;
                ssl_certificate /var/app/current/sslcert/server.crt;
                ssl_certificate_key /var/app/current/sslcert/server.key;

                # Diffie-Hellman parameter for DHE ciphersuites, recommended 2048 bits
                ssl_dhparam /var/app/current/sslcert/dhparam.pem;


                # enable session resumption to improve https performance
                # http://vincent.bernat.im/en/blog/2011-ssl-session-reuse-rfc5077.html
                ssl_session_cache shared:SSL:32m;
                ssl_session_timeout 10m;
                ssl_buffer_size 8k;
                # enables server-side protection from BEAST attacks
                # http://blog.ivanristic.com/2013/09/is-beast-still-a-threat.html
                ssl_prefer_server_ciphers on;

                # disable SSLv3(enabled by default since nginx 0.8.19) since it's less secure then TLS http://en.wikipedia.org/wiki/Secure_Sockets_Layer#SSL_3.0
                ssl_protocols TLSv1 TLSv1.1 TLSv1.2;

                # ciphers chosen for forward secrecy and compatibility
                # http://blog.ivanristic.com/2013/08/configuring-apache-nginx-and-openssl-for-forward-secrecy.html
                ssl_ciphers "ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA:ECDHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES128-SHA256:DHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES256-GCM-SHA384:AES128-GCM-SHA256:AES256-SHA256:AES128-SHA256:AES256-SHA:AES128-SHA:DES-CBC3-SHA:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!MD5:!PSK:!RC4";

                # enable ocsp stapling (mechanism by which a site can convey certificate revocation information to visitors in a privacy-preserving, scalable manner)
                # http://blog.mozilla.org/security/2013/07/29/ocsp-stapling-in-firefox/
                #ssl_stapling on;
                #ssl_stapling_verify on;
                #ssl_trusted_certificate /var/app/current/sslcert/godaddy_bundle_1.crt;
                #ssl_trusted_certificate /var/app/current/sslcert/godaddy_bundle_2.crt;
                #ssl_trusted_certificate /var/app/current/sslcert/godaddy_bundle_3.crt;

                # using Google's DNS to avoid wrong DNS caching
                resolver 8.8.8.8 8.8.4.4;

                include /etc/nginx/conf.d/*.conf;
            }

    "/etc/nginx/common/server.conf" :
        mode: "000755"
        owner: root
        group: root
        content: |
            listen 8080;
            listen [::]:8080;

            listen 8443 ssl deferred spdy;
            listen [::]:8443 ssl deferred spdy;

            set $fixed_www '';
            set $needs_redirect 0;

            # check and decide on adding www prefix
            #if ($host !~* ^www(.*)) {
            #    set $fixed_www 'www.';
            #    set $needs_redirect 1;
            #}

            #if ($scheme != 'https') {
            #    set $needs_redirect 1;
            #}

            # check and decide on moving to https based on scheme ( needed amazon )
            if ($http_x_forwarded_proto != 'https') {
                set $needs_redirect 1;
            }

            if ($request_uri ~* ^.*elb-health-check\.html(\:80|\:443|\:8080|\:8443)?$ ) {
                return 200 '{ "healthy": true }';
            }

            # set $needs_redirect 0;
            # Redirect all requests to https and adds www prefix
            if ($needs_redirect) {
                return 301 https://$fixed_www$host$request_uri;
            }

            ## Only allow these request methods
            if ($request_method !~ ^(GET|HEAD|POST|PUT)$ ) {
                return 444;
            }

            ## Dont allow random ip scanning
            if ($host !~ (.com|.co.uk)$ ) {
                return 444;
            }

            ## Deny certain Referers (they will affect our SEO scores) ###
            if ( $http_referer ~* (babes|forsale|girl|jewelry|love|nudit|organic|poker|porn|sex|teen) ) {
                return 403;
            }

            ## Block download agents
            if ($http_user_agent ~* LWP::Simple|BBBike|wget) {
                return 403;
            }

            ## Enable HSTS(HTTP Strict Transport Security) https://developer.mozilla.org/en-US/docs/Security/HTTP_Strict_Transport_Security
            ## To avoid ssl stripping https://en.wikipedia.org/wiki/SSL_stripping#SSL_stripping
            add_header Strict-Transport-Security "max-age=604800; includeSubDomains; preload; always";

            # Dynamic Subdomains
            server_name ~^(www\.)?((?<subdomain>.+?)\.)?((?<domain>.+?)\.)?(?<host_domain>.+)\.(?<tld>co.uk)$ ~^(www\.)?((?<subdomain>.+?)\.)?((?<domain>.+?)\.)?(?<host_domain>.+)\.(?<tld>.*)$;

            set $base_root "/var/app/current";

            set $root "${base_root}/website/dist";

            # Add folder name that you want as a subdomain i.e. (app|intranet|<something>|<something-else>)
            if ( $subdomain ~* (app|intranet) ) {
                set $root "${base_root}/${subdomain}/dist";
            }

            root $root;

            #!!! IMPORTANT !!! We need to hide all system files from prying eyes
            # This will deny access to any hidden file (beginning with a .)
            location ~ /\. {
                deny  all;
            }

            # redirect server error pages to the static page /50x.html
            error_page   500 502 503 504  /50x.html;
            location = /50x.html {
                root   html;
            }

            location ~ ^/(images/|img/|video/|javascript/|js/|css/|stylesheets/|styles/|flash/|media/|static/|fonts/|font/|robots.txt|humans.txt|sitemap.xml|favicon.ico) {
                add_header Cache-Control public;
                add_header Pragma public;
                access_log off;
                expires max;
            }

            location ~ ^/api/(spec|tests|public) {
                root "${base_root}";
                try_files $uri $uri/ $uri/index.html @api;
            }

            location ~ ^/api {
                try_files $uri $uri/ @api;
            }

            location ~ ^/tests/api {
                rewrite ^/tests/api(.*)?$ /api/tests$1 last;
            }

            location ~ ^/tests/(app|intranet)$ {
                set $full_domain $subdomain.$host_domain;

                if ($domain) {
                    set $full_domain $domain.$host_domain;
                }

                rewrite ^/tests/(.*)$ https://$1.${full_domain}.${tld}/tests last;
            }

            location ~ ^/tests {
                try_files $uri $uri/ "${uri}index.html" "${uri}/index.html";
            }

            location @api {
                set $api_server "https://api_server";

                # include common/proxy.ssl.conf;

                proxy_pass $api_server;

                add_header Cache-Control no-cache;
                add_header Cache-Control private;
                add_header Pragma no-cache;
                add_header Pragma private;
                expires 0;
            }

            location @prerender {
                # proxy_set_header X-Prerender-Token <prerender-token>;

                set $prerender 0;
                if ($http_user_agent ~* "baiduspider|twitterbot|facebookexternalhit|rogerbot|linkedinbot|embedly|quora link preview|showyoubot|outbrain|pinterest|slackbot|vkShare|W3C_Validator") {
                    set $prerender 1;
                }
                if ($args ~ "_escaped_fragment_") {
                    set $prerender 1;
                }
                if ($http_user_agent ~ "Prerender") {
                    set $prerender 0;
                }
                if ($uri ~ "\.(js|css|xml|less|png|jpg|jpeg|gif|pdf|doc|txt|ico|rss|zip|mp3|rar|exe|wmv|doc|avi|ppt|mpg|mpeg|tif|wav|mov|psd|ai|xls|mp4|m4a|swf|dat|dmg|iso|flv|m4v|torrent|ttf|woff)") {
                    set $prerender 0;
                }

                if ($prerender = 1) {

                    #setting prerender as a variable forces DNS resolution since nginx caches IPs and doesnt play well with load balancing
                    set $prerender "service.prerender.io";
                    rewrite .* /$scheme://$host$request_uri? break;
                    proxy_pass http://$prerender;
                }
                if ($prerender = 0) {
                    rewrite .* /index.html break;
                }
            }

    "/etc/nginx/conf.d/00_platform.conf" :
        mode: "000755"
        owner: root
        group: root
        content: |
            server {
                include common/server.conf;

                location / {
                    try_files $uri $uri/ @prerender;

                    include common/restricted.conf;
                }
            }

    "/etc/nginx/common/restricted.conf" :
        mode: "000755"
        owner: root
        group: root
        content: |
            auth_basic            "Restricted";
            auth_basic_user_file  "${base_root}/config/.htpasswd";

    "/etc/nginx/common/proxy.conf" :
        mode: "000755"
        owner: root
        group: root
        content: |
            proxy_buffering on;
            proxy_buffers 16 8k;
            proxy_buffer_size 8k;

            proxy_redirect off;
            proxy_http_version 1.1;
            proxy_pass_request_headers on;

            proxy_set_header Host $http_host;
            proxy_set_header X-NginX-Proxy true;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header Connection $proxy_connection;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $proxy_x_forwarded_proto;

    "/etc/nginx/common/map.conf" :
        mode: "000755"
        owner: root
        group: root
        content: |
            # If we receive X-Forwarded-Proto, pass it through; otherwise, pass along the
            # scheme used to connect to this server
            map $http_x_forwarded_proto $proxy_x_forwarded_proto {
              default $http_x_forwarded_proto;
              ''      $scheme;
            }

            # If we receive Upgrade, set Connection to "upgrade"; otherwise, delete any
            # Connection header that may have been passed to this server
            map $http_upgrade $proxy_connection {
              default upgrade;
              ''      '';
            }

            # Gets the basename of the original request
            map $request_uri $request_basename {
                ~/(?<captured_request_basename>[^/?]*)(?:\?|$) $captured_request_basename;
            }

            # Gets the basename of the current uri
            map $uri $basename {
                ~/(?<captured_basename>[^/]*)$ $captured_basename;
            }


    "/etc/nginx/common/proxy.ssl.conf" :
        mode: "000755"
        owner: root
        group: root
        content: |
            proxy_ssl_certificate         /var/app/current/sslcert/server.crt;
            proxy_ssl_certificate_key     /var/app/current/sslcert/server.key;

            proxy_ssl_session_reuse       on;
            proxy_ssl_protocols           TLSv1 TLSv1.1 TLSv1.2;
            proxy_ssl_ciphers             "ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA:ECDHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES128-SHA256:DHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES256-GCM-SHA384:AES128-GCM-SHA256:AES256-SHA256:AES128-SHA256:AES256-SHA:AES128-SHA:DES-CBC3-SHA:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!MD5:!PSK:!RC4";

            #proxy_ssl_verify        on;
            #proxy_ssl_verify_depth   2;
            #proxy_ssl_trusted_certificate /var/app/current/sslcert/godaddy_bundle_1.crt;
            #proxy_ssl_trusted_certificate /var/app/current/sslcert/godaddy_bundle_2.crt;
            #proxy_ssl_trusted_certificate /var/app/current/sslcert/godaddy_bundle_3.crt;

    "/etc/nginx/conf.d/00_upstream.conf" :
        mode: "000755"
        owner: root
        group: root
        content: |
            upstream api_server {
                least_conn;
                keepalive 512;
                server 127.0.0.1:3000;
            }
