{"name":"Platform-base","tagline":"Platform Base - Fork and change as necessary","body":"## Platform Base\r\n\r\n#### Ember\r\n\r\n## Prerequisites\r\nYou will need the following things properly installed on your computer.\r\n\r\n* [Git](http://git-scm.com/)\r\n* [Node.js](http://nodejs.org/) (with NPM)\r\n* [Bower](http://bower.io/)\r\n* [Ember CLI](http://www.ember-cli.com/)\r\n* [PhantomJS](http://phantomjs.org/)\r\n\r\n### Code Generators\r\nMake use of the many generators for code, try `ember help generate` for more details\r\n\r\n## Further Reading / Useful Links\r\n* [ember.js](http://emberjs.com/)\r\n* [ember-cli](http://www.ember-cli.com/)\r\n* Development Browser Extensions\r\n\t* [ember inspector for chrome](https://chrome.google.com/webstore/detail/ember-inspector/bmdblncegkenkacieihfhpjfppoconhi)\r\n\t* [ember inspector for firefox](https://addons.mozilla.org/en-US/firefox/addon/ember-inspector/)\r\n\r\n## Common Dev Practices\r\n\r\n#### Style Guides\r\n\t* [Style Guide](https://github.com/paulmillr/code-style-guides/)\r\n\r\n#### General\r\n\t* Run all commands from root of application\r\n\t* Install all Node Modules at root of application\r\n\t* If new global npm module is used then also add it to gulpfile.js (install-globals task)\r\n\r\n#### GIT\r\n\t* Never work on your master branch - This should only be used to synchronize with the upstream repo\r\n\t* Every new ticket worked on should have its own branch - `git checkout -b DW-123`\r\n\t* This branch will now send a pull request to the upstream master branch and ONLY after it is merged\r\n\t* `git fetch upstream; git merge --no-edit upstream/master`\r\n\r\n#### CSS / SCSS\r\n\t* Always use .scss files rather than css\r\n\t* Break up scss files per page / per module and import them all in app.scss\r\n\r\n#### JS\r\n\t* All files should not be more than 300 lines long\r\n\t* Always put this at top of ember apps `import Ember from 'ember';`\r\n\t* Always fix all JSHint errors as they show up or they will grow too large and tedious\r\n\r\n## Setting up Dev Environment (Mac)\r\n\r\n* Make sure you own /usr/local and /etc/paths.d\r\n\t* `sudo chown -R (whoami) /usr/local`\r\n\t* `sudo chown -R (whoami) /etc/paths.d/`\r\n\r\n* Show All Hidden Files\r\n\t* `defaults write com.apple.finder AppleShowAllFiles YES`\r\n\r\n* Setup Sublime 3 as a terminal command (optional)\r\n\t* [Download Sublime Text 3](http://c758482.r82.cf2.rackcdn.com/Sublime%20Text%20Build%203083.dmg)\r\n\t* `ln -s \"/Applications/Sublime Text.app/Contents/SharedSupport/bin/subl\" /usr/local/bin/sublime`\r\n\r\n* Install Atom (optional)\r\n\t* [Download Atom](https://eggerapps.at/postico/download/)\r\n\r\n* Install Postico (optional)\r\n\t* [Download Postico](https://eggerapps.at/postico/download/)\r\n\r\n* Install ImageMagick\r\n\t* [Download ImageMagick](http://cactuslab.com/imagemagick/assets/ImageMagick-6.9.1-0.pkg.zip)\r\n\r\n* Install Homebrew\r\n\t* `ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"`\r\n\t* Upgrade Brew -> `brew update && brew upgrade`\r\n\r\n* Install Watchman and python\r\n\t* `brew install watchman && brew install python`\r\n\r\n* Install Postgres\r\n\t* [Download Postgres](https://github.com/PostgresApp/PostgresApp/releases/download/9.4.4.0/Postgres-9.4.4.0.zip)\r\n\t* Add to $PATH permanently -> `echo '/Applications/Postgres.app/Contents/Versions/9.4/bin' > /etc/paths.d/postgres`\r\n\r\n* Install MongoDB\r\n\t* `brew install mongodb --with-openssl`\r\n\t* [MongoDB PrefPane](https://github.com/remysaissy/mongodb-macosx-prefspane/raw/master/download/MongoDB.prefPane.zip)\r\n\r\n* Install Sass\r\n\t* `gem install sass`\r\n\r\n* Install Node / NPM\r\n\t* `brew install node`\r\n\t* `npm install npm -g`\r\n\r\n* Download Source Code\r\n\t* `cd /path/where/you/want/to/install/code/base`\r\n\t* Go to platform url -> [Platform](https://github.com/platform/platform.git)\r\n\t* Fork Repo\r\n\t* `git clone https://github.com/<your-github-username>/platform.git`\r\n\t* `cd platform`\r\n\r\n### Add upstream\r\n* `git remote add upstream https://github.com/DnD-Enterprises/platform-base.git`\r\n* `git branch --unset-upstream`\r\n\r\n### Configuring Application\r\n* `npm run init-app` // *** THIS MAY NOT ACTUALLY WORK ***\r\n\r\n* Install Global Modules\r\n\t* `npm run install-globals`\r\n\t* OR\r\n\t* `npm install -g gulp`\r\n\t* `npm install -g bower`\r\n\t* `npm install -g ember-cli`\r\n\t* `npm install -g grunt-cli`\r\n\t* `npm install -g broccoli-cli`\r\n\r\n\t* `npm install -g pm2`\r\n\t* `npm install -g nodemon`\r\n\t* `npm install -g phantomjs`\r\n\t* `npm install -g node-inspector`\r\n\r\n* Create Certificates\r\n\t* sh bin/make-fake-cert.sh\r\n\r\n## Install Nginx - We are going to also make sure we can use port 80\r\n* Further Reading - [Set up Nginx on Port 80](http://derickbailey.com/2014/12/27/how-to-start-nginx-on-port-80-at-mac-osx-boot-up-log-in/)\r\n\t* `brew tap homebrew/nginx`\r\n\t* `brew install nginx-full --with-spdy --with-file-aio --with-ipv6 --with-http_ssl_module --with-http_spdy_module --with-http_realip_module --with-http_gunzip_module --with-http_gzip_static_module --with-http_stub_status_module --with-http_perl_module --with-pcre --with-debug`\r\n\r\n\t* To have launchd start nginx at login:\r\n\t\t* `sudo cp /usr/local/opt/nginx-full/*.plist /Library/LaunchDaemons`\r\n\r\n\t* Then to load nginx now:\r\n\t\t* `sudo chown root:wheel /Library/LaunchDaemons/homebrew.mxcl.nginx-full.plist`\r\n\t\t* `sudo launchctl load -w /Library/LaunchDaemons/homebrew.mxcl.nginx-full.plist`\r\n\r\n\t* Setup Config\r\n\t\t* `sh bin/make-fake-cert.sh`\r\n\t\t* `sh bin/nginx-config.sh`\r\n\r\n\t* Setup Private Hosts\r\n\t\t* `sudo nano /private/etc/hosts` OR `sudo sublime /private/etc/hosts`\r\n\t\t* Copy The text below into this file (one per line)\r\n\t\t```\r\n\t\t\t127.0.0.1 platform.local.com\r\n\t\t\t127.0.0.1 platform.local.co.uk\r\n\t\t\t127.0.0.1 www.platform.local.com\r\n\t\t\t127.0.0.1 www.platform.local.co.uk\r\n\r\n\t\t\t127.0.0.1 app.platform.local.com\r\n\t\t\t127.0.0.1 app.platform.local.co.uk\r\n\t\t\t127.0.0.1 www.app.platform.local.com\r\n\t\t\t127.0.0.1 www.app.platform.local.co.uk\r\n\r\n\t\t\t127.0.0.1 intranet.platform.local.com\r\n\t\t\t127.0.0.1 intranet.platform.local.co.uk\r\n\t\t\t127.0.0.1 www.intranet.platform.local.com\r\n\t\t\t127.0.0.1 www.intranet.platform.local.co.uk\r\n\t\t```\r\n\t\t* `dscacheutil -flushcache; sudo killall -HUP mDNSResponder`\r\n\r\n\r\n### Starting Application\r\n* Make sure postgres is started\r\n* `sh bin/npm-bower-install.sh`\r\n* `npm run start-dev`\r\n\r\n## Building\r\n* `npm run build`\r\n* `npm run build-prod` (production)\r\n\r\n## Testing\r\n* `npm test`\r\n\r\n## Deployment\r\n* Install Deployment tools\r\n\t* `pip install boto && pip install awscli && pip install awsebcli`\r\n\t* `aws configure`\r\n\r\n#### Elastic Beanstalk Create\r\n* `eb init`\r\n* `eb create`\r\n* `eb status --verbose`\r\n* `eb deploy`\r\n\r\n#### Elastic Beanstalk SSH\r\n* `eb ssh --setup`\r\n* `eb ssh`\r\n\r\n#### Elastic Beanstalk Terminate\r\n* `eb terminate`\r\n* `eb terminate-all`\r\n\r\n#### AWS Create Version\r\n* `git tag -a <version-tag> -m \"Deployment Tag\"`\r\n* `eb deploy`\r\n\r\n#### How to deploy\r\n* `npm run deploy`\r\n\r\n#### Configuring Nginx / Application / Environment\r\n* `npm run init-app`\r\n\r\n#### Updating Application\r\n* `npm run update-app`\r\n\r\n### Deployment Files\r\n* All files can be found in the .ebextensions directory\r\n* files.config - holds the files we will be storing on the system i.e. nginx.conf\r\n* commands.config - holds the commands we will run on elastic beanstalk before and after the application is retrieved\r\n* settings.config - holds the settings we pass to set up the elastic beanstalk console\r\n* services.config - holds the sysvinit settings we want to have the system run\r\n* environment.config - holds environment variables like passwords and keys and should never be checked in to the repo\r\n\r\n## Live Reload\r\n* Website - Port: 39000, Nginx Incoming Port: N/A\r\n* Intranet - Port: 38000, Nginx Incoming Port: 38100\r\n* App - Port: 39000, Nginx Incoming Port: 39100\r\n* API - Uses Nodemon\r\n* To initiate live reloads (due to the fact we are using self signed certificates) you need to visit these urls\r\n\t* [Website Web Socket](https://doctify.local.com:39000/livereload)\r\n\t* [App Web Socket](https://app.doctify.local.com:37100/livereload)\r\n\t* [Intranet Web Socket](https://intranet.doctify.local.com:38100/livereload)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}